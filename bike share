import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    city = input(" please enter the city that u would like to see the data for :( chicago , new york city     , washington\n\n)").lower()
    while city not in(CITY_DATA.keys()):

        print ("you enterd an invaild city")
        city = input(" please enter the city that u would like to see the data for :( chicago , new york         city , washington\n\n)").lower()


    # TO DO: get user input for month (all, january, february, ... , june)
    months = ["january","february","march","april","may","june","all"]
    while True :

        month = input("please enter the name of the month that u would like the data for , january ,             february , march, april ,may ,june ... or enter all to apply no month filter ").lower()
        if month in months:
            break
        else:
            print("you enterd an invaild month")



    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    days= ["monday","tuesday","wednesday","thursdaay","friday","saturday","sunday","all"]
    
    while True:
        day= input("please enter the name of the day of week that u would like the data for , sunday             ,monday, tuesday ... or all to apply no day filter ").lower()
        if day in days:
            break
        else:
            print("you enter an invaild day ")


    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    
    """
    Loads data for the specified city and filters by month and day if applicable.
    

    Args:
    
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(CITY_DATA[city]) 
    
    df["Start Time"] = pd.to_datetime(df["Start Time"])
    df["month"]= df["Start Time"].dt.month
    df["day_of_week"]=df["Start Time"].dt.day_name()
    df["hour"]=df["Start Time"].dt.hour
    
    if month != "all":
    
        
        months = ["january", "february", "march", "april", "may", "june"]
        month = months.index(month) + 1

        
        df = df[df["month"] == month]

    
    if day != "all":
      
        df = df[df["day_of_week"] == day.title()]



    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    print("the most common month is :{}".format(df["month"].mode()[0]))


    # TO DO: display the most common day of week
    print("the most common day is :{}".format(df["day_of_week"].mode()[0]))


    # TO DO: display the most common start hour
    
    print("the most common hour is :{}".format(df["hour"].mode()[0]))


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    print("the most common start station is :{}".format(df["Start Station"].mode()[0]))


    # TO DO: display most commonly used end station
    print("the most common end station is : {}".format(df["End Station"].mode()[0]))


    # TO DO: display most frequent combination of start station and end station trip
    df["frequentcomb"]=df["Start Station"]+","+df["End Station"]
    
    print("the most common end station is : {}".format(df["frequentcomb"].mode()[0]))


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    print("total travel time is :",(df["Trip Duration"].sum()))


    # TO DO: display mean travel time
    print("total travel time is :",(df["Trip Duration"].mean()))


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    print(df["User Type"].value_counts())

    if "Gender" in (df.columns):
       
            # TO DO: Display counts of gender

        print(df["Gender"].value_counts())
        
            # TO DO: Display earliest, most recent, and most common year of birth

        print("the users most common year of birth is :",int(df["Birth Year"].mode()[0]))
        print("the most eldest users is :",int(df["Birth Year"].min()))
        print("the most youngest users is :",int(df["Birth Year"].max()))






    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def display_data(df):
    
    raw = input('\nWould you like to diplay raw data?\n')
    if raw.lower() == 'yes':
        count = 0
        while True:
            print(df.iloc[count: count+5])
            count += 5
            ask = input('Next five raws?')
            if ask.lower() != 'yes':
                break


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        display_data(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":


        main()
